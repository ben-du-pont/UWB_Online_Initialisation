#!/usr/bin/env python3

import rospy
import threading
import queue

import numpy as np

from message_filters import ApproximateTimeSynchronizer, Subscriber

from geometry_msgs.msg import PoseStamped, PoseWithCovarianceStamped, TransformStamped
from std_msgs.msg import Float32, String
from uwb_online_initialisation import UwbOnlineInitialisation
import tf.transformations
from visualization_msgs.msg import Marker, MarkerArray

from uwb_ros_driver.msg import Uwb
from mission_sequencer.msg import MissionWaypointArray, MissionWaypoint, MissionWaypointStamped


# FOR BEN RUNS
# rosbag record -o ~/dupont_cws/bagfiles/experiment_run_3 /mussol/uwb_driver_node/uwb /twins_cns6/vrpn_client/estimated_transform /uwb_message/uwb_range_and_pose

# FOR IGOR RUNS
# rosbag record -o ~/dupont_cws/bagfiles/igor_run_2 -a


class UWBAnchorInitialisationNode:

    publish_optimal_waypoints = True
    run_id = 8
    TAG_OFFSET_X = 0.0
    TAG_OFFSET_Y = -0.035
    TAG_OFFSET_Z = -0.06

    anchor_1_gt = [-2.460, -1.744, 0.233]
    anchor_2_gt = [3.049, -1.385, 0.896]
    anchor_3_gt = [-2.794, 1.067, 2.006]
    anchor_4_gt = [2.861, 2.463, 2.143]
    
    anchors_list = [anchor_1_gt, anchor_2_gt, anchor_3_gt, anchor_4_gt]


    # This is hardcoded to initialise the UWB Online initialisation class, make sure they match with the mission csv file (without the take off point)
    mission_waypoints = [[1,-2.8,0], [1,-2.8,1.0], [0,-2.8,1.0], [0,2.8,1.0], [0,-2.8,1.0]]

    # Dictionnary to keep track of the anchor status to be able to write the csv only once
    anchor_status = {
        "1": "unseen",
        "2": "unseen",
        "3": "unseen",
        "4": "unseen",
    }

    def __init__(self):

        self.current_position = None
        self.current_orientation = None
        self.current_tag_position = None

        # Initialize the UWB initializer instance
        self.initializer = UwbOnlineInitialisation()

        # Initialise the path to follow in the initialiser
        self.mission_waypoints_tag_frame = []
        for waypoint in self.mission_waypoints:
            tag_waypoint = self.drone_to_tag_transformation(waypoint)
            self.mission_waypoints_tag_frame.append(tag_waypoint)

        
        self.initializer.passed_waypoints = [self.mission_waypoints_tag_frame[0]] # The take off point
        self.initializer.remaining_waypoints = self.mission_waypoints_tag_frame[1:] # The points that the mission takes

        rospy.loginfo(f"Initialised the passed waypoint in the UWB Online initialisation class: Passed Waypoints = {self.initializer.passed_waypoints}")
        rospy.loginfo(f"Initialised the remaining waypoints in the UWB Online initialisation class: Remaining Waypoints =: {self.initializer.remaining_waypoints}")

        

        # # Subscribers
        # Subscribers using message filters for time synchronization
        
        # pose_sub = Subscriber("/mavros/vision_pose/pose", PoseStamped)
        pose_sub = Subscriber("/twins_cns6/vrpn_client/estimated_transform", TransformStamped)
        range_sub = Subscriber("/mussol/uwb_driver_node/uwb", Uwb)

        # Use ApproximateTimeSynchronizer to sync pose and range messages
        ats = ApproximateTimeSynchronizer([pose_sub, range_sub], queue_size=10, slop=0.1)
        ats.registerCallback(self.synchronized_callback)

        # Mission waypoints reached
        rospy.Subscriber('/mission_sequencer/waypoint_reached', MissionWaypointStamped, self.waypoints_reached_callback)

        # Publisher
        self.waypoints_pub = rospy.Publisher("/mission_sequencer/waypoint_list", MissionWaypointArray, queue_size=10) # To publish the optimal waypoints to the FlightStack
        self.combined_pub = rospy.Publisher("/uwb_message/uwb_range_and_pose", PoseWithCovarianceStamped, queue_size=10) # To publish the synchronised pose and uwb range to get better rosbags

        self.marker_pub = rospy.Publisher("/visualization_marker_array", MarkerArray, queue_size=10) # Visualisation of the optimal trajectory
        self.anchors_marker_pub = rospy.Publisher("/visualization_anchors", MarkerArray, queue_size=10) # Ground truth visualistion for the anchors
        self.anchors_estimate_marker_pub = rospy.Publisher("/visualization_anchors_estimate", MarkerArray, queue_size=10) # Visualisation for the estimate of the anchors before optimisation
        self.final_anchors_estimate_marker_pub = rospy.Publisher("/visualization_final_anchors_estimate", MarkerArray, queue_size=10) # Visualisation for the estimate of the anchors in real time (So will display the final estimate too)


        self.processing_queue = queue.Queue() # Queue to store the synchronised measurements
        self.processing_thread = threading.Thread(target=self.process_queue) # Separate thread
        self.processing_thread.start()


    def synchronized_callback(self, pose_msg, uwb_msg):
        # Update position and orientation
        # self.current_position = (pose_msg.pose.position.x, pose_msg.pose.position.y, pose_msg.pose.position.z)
        # self.current_orientation = (pose_msg.pose.orientation.x, pose_msg.pose.orientation.y, pose_msg.pose.orientation.z, pose_msg.pose.orientation.w)

        self.current_position = (pose_msg.transform.translation.x, pose_msg.transform.translation.y, pose_msg.transform.translation.z)
        self.current_orientation = (pose_msg.transform.rotation.x, pose_msg.transform.rotation.y, pose_msg.transform.rotation.z, pose_msg.transform.rotation.w)

        # Retrieve the anchor ID and the measured range
        anchor_id = uwb_msg.ranges[0].id
        range_measurement = uwb_msg.ranges[0].distance

        # Update the waypoints in the UWB online initialisation class, using the current postition
        # self.waypoint_checkpoint(self.current_position, threshold=0.1)

        

        # Compensate for the tag to drone transformation
        self.current_tag_position = self.drone_to_tag_transformation(self.current_position, self.current_orientation)

        # rospy.loginfo(f"Synchronized Range: {anchor_id} - {range_measurement} - Position: {self.current_tag_position}")

        # Proceed to publish the combined message for the rosbags
        self.publish_combined_message(range_measurement, anchor_id)

        # Put the new measurement in the queue
        self.processing_queue.put((self.current_tag_position, range_measurement, anchor_id))

        # If the anchor status is to be save, save a csv file with all the measurements for simplicity
        if self.anchor_status[anchor_id] == "to_be_saved":
            self.initializer.save_measurements_to_csv(anchor_id, f"/home/nvidia/dupont_cws/csv_files/run_{self.run_id}_{anchor_id}_results.csv")
            self.anchor_status[anchor_id] = "done"
            rospy.loginfo(f"Published the csv file for anchor {anchor_id}")


    def process_queue(self):
        while not rospy.is_shutdown():
            try:
                # Fetch the next item from the queue
                position, range_measurement, anchor_id = self.processing_queue.get(timeout=1)

                # UWB online initialisation callback function, will return other than none only if new waypoints are to be reached
                new_tag_waypoints = self.initializer.measurement_callback(position, range_measurement, anchor_id)

                # If the anchor is initialised, publish the csv
                if self.initializer.anchor_measurements_dictionary[anchor_id]["status"] == "initialised":
                    if self.anchor_status[anchor_id] == "unseen":
                        self.anchor_status[anchor_id] = "to_be_saved"

                # rospy.loginfo(f"Processed anchor {anchor_id} with position {position} and range {range_measurement}")

                # Publish ground truth position for the anchors
                self.publish_anchors_gt()

                anchor_current_estimate = [self.initializer.anchor_measurements_dictionary[anchor_id]["estimator"][:3]]

                # Publish the current estimate for where the anchor is
                self.publish_current_anchors_estimate(anchor_current_estimate)

                # Process the optimal waypoints
                if new_tag_waypoints is not None and self.publish_optimal_waypoints:

                    rospy.loginfo(f"Received optimal waypoints for the tag: {new_tag_waypoints}")

                    # Convert them to the drone frame
                    drone_waypoints = []
                    for wp in new_tag_waypoints:
                        drone_wp, _ = self.tag_to_drone_transformation(wp)
                        drone_waypoints.append(drone_wp)
                    
                    rospy.loginfo(f"Converted the optimal waypoints into drone frame: {drone_waypoints}")

                    self.publish_waypoints(drone_waypoints)

                    anchor_estimate = [self.initializer.anchor_measurements_dictionary[anchor_id]["estimator"][:3]]

                    # Publish the anchor estimate for pre optimisation
                    self.publish_anchors_estimate(anchor_estimate)
                    
                
                self.processing_queue.task_done()  # Mark this task as done

            except queue.Empty:
                rospy.loginfo("QUEUE IS EMPTY FOR NOW")
                continue
    



    def waypoints_reached_callback(self, data):

        def is_waypoint_in_list(waypoint, waypoint_list, tolerance=1e-1):
            # Loop through each waypoint in the list
            for wp in waypoint_list:
                # Check if the waypoint matches within a given tolerance
                if np.allclose(waypoint, wp, atol=tolerance):
                    return True
            return False

        def remove_waypoint_once(waypoint_list, waypoint_to_remove, tolerance=1e-1):
            for i, wp in enumerate(waypoint_list):
                if np.allclose(wp, waypoint_to_remove, atol=tolerance):
                    # Remove the waypoint and return the modified list
                    del waypoint_list[i]
                    break  # Exit after removing the first occurrence
            return waypoint_list

        waypoint_drone = [data.waypoint.x, data.waypoint.y, data.waypoint.z]
        waypoint_tag = self.drone_to_tag_transformation(waypoint_drone)

        # Check if the waypoint is in the remaining waypoints
        
        if is_waypoint_in_list(waypoint_tag, self.initializer.remaining_waypoints):
            # Remove the waypoint from remaining_waypoints and add it to passed_waypoints
            # self.initializer.remaining_waypoints.remove(waypoint_tag)
            self.initializer.remaining_waypoints = remove_waypoint_once(self.initializer.remaining_waypoints, waypoint_tag)
            self.initializer.passed_waypoints.append(waypoint_tag)
            
            rospy.loginfo(f"Waypoint {waypoint_tag} reached. {len(self.initializer.remaining_waypoints)} remaining.")

            # Check if the waypoint is one of the optimal waypoints
            if is_waypoint_in_list(waypoint_tag, self.initializer.current_optimal_waypoints):
                # Remove it from the current optimal waypoints list
                # self.initializer.current_optimal_waypoints.remove(waypoint_tag)
                self.initializer.current_optimal_waypoints = remove_waypoint_once(self.initializer.current_optimal_waypoints, waypoint_tag)

                rospy.loginfo(f"Optimal waypoint {waypoint_tag} reached, {len(self.initializer.current_optimal_waypoints)} remaining.")
        else:
            rospy.logwarn(f"Received waypoint {waypoint_drone} not found in remaining waypoints.")


    def waypoint_checkpoint(self, drone_position, threshold=0.3):
        """Function to check if the drone is close to a waypoint and if so, update the remaining waypoints."""

        # Check if there are remaining waypoints to reach
        if self.initializer.remaining_waypoints:

            # Check if the current position of the drone is close to the next waypoint to achieve (up to a thresh)
            if np.linalg.norm(np.array(drone_position) - np.array(self.initializer.remaining_waypoints[0])) < threshold:

                # If so, update the waypoints, by updating the passed and remaining waypoints
                self.initializer.passed_waypoints.append(self.initializer.remaining_waypoints[0])
                self.initializer.remaining_waypoints.pop(0)

                last_waypoint = self.initializer.passed_waypoints[-1]

                if last_waypoint in self.initializer.current_optimal_waypoints:
                    self.initializer.current_optimal_waypoints.remove(last_waypoint)
                    rospy.loginfo(f"Optimal waypoint reached, {len(self.initializer.current_optimal_waypoints)} remaining")
                
                rospy.loginfo(f"Waypoint reached, {len(self.initializer.remaining_waypoints)} remaining")

    

    # Utility function for the frame transformations
    def rotate_vector_by_quaternion(self, vector, quaternion):
        # Create a 4D vector from the input vector (x, y, z) with w=0 for quaternion multiplication
        vector_q = [vector[0], vector[1], vector[2], 0]

        # Apply the quaternion rotation: q * v * q^(-1)
        q_inv = tf.transformations.quaternion_inverse(quaternion)
        rotated_vector_q = tf.transformations.quaternion_multiply(
            tf.transformations.quaternion_multiply(quaternion, vector_q), q_inv
        )

        # Return only the rotated vector part (x, y, z)
        return rotated_vector_q[:3]

    def drone_to_tag_transformation(self, drone_position, drone_orientation = [0,0,0.7071,0.7071]):

        tag_translation = [self.TAG_OFFSET_X, self.TAG_OFFSET_Y, self.TAG_OFFSET_Z]

        # Rotate the translation vector by the drone's orientation
        tag_translation_world = self.rotate_vector_by_quaternion(tag_translation, drone_orientation)

        # Compute the tag's world position by adding the rotated translation to the drone's position
        tag_position_world = [
            drone_position[0] + tag_translation_world[0],
            drone_position[1] + tag_translation_world[1],
            drone_position[2] + tag_translation_world[2],
        ]

        return tag_position_world

    def tag_to_drone_transformation(self, tag_position):
        # Assuming drone orientation is fixed (yaw = 0, i.e., aligned with the global frame axes)
        drone_orientation = [0, 0, 0, 1]  # Quaternion representing zero rotation

        # Tag translation in the drone's frame (offset from the drone's center of gravity)
        tag_translation = [self.TAG_OFFSET_X, self.TAG_OFFSET_Y, self.TAG_OFFSET_Z]

        # Rotate the tag offset by the drone's orientation (should result in no change since orientation is zero)
        tag_translation_world = self.rotate_vector_by_quaternion(tag_translation, drone_orientation)

        # Compute the drone's position by subtracting the rotated tag offset from the desired tag position
        drone_position_world = [
            tag_position[0] - tag_translation_world[0],
            tag_position[1] - tag_translation_world[1],
            tag_position[2] - tag_translation_world[2],
        ]

        return drone_position_world, drone_orientation

        





    # Publisher functions
    def publish_combined_message(self, range_measurement, anchor_id):
        # Create a PoseWithCovarianceStamped message
        combined_msg = PoseWithCovarianceStamped()

        # Fill in the pose (position and orientation)
        combined_msg.pose.pose.position.x = self.current_position[0]
        combined_msg.pose.pose.position.y = self.current_position[1]
        combined_msg.pose.pose.position.z = self.current_position[2]

        combined_msg.pose.pose.orientation.x = self.current_orientation[0]
        combined_msg.pose.pose.orientation.y = self.current_orientation[1]
        combined_msg.pose.pose.orientation.z = self.current_orientation[2]
        combined_msg.pose.pose.orientation.w = self.current_orientation[3]

        # Use covariance field to store the range (arbitrarily using the first element of covariance matrix)
        combined_msg.pose.covariance[0] = range_measurement
        combined_msg.pose.covariance[1] = self.current_tag_position[0]
        combined_msg.pose.covariance[2] = self.current_tag_position[1]
        combined_msg.pose.covariance[3] = self.current_tag_position[2]

        # Use header frame_id to store the anchor ID
        combined_msg.header.frame_id = f"anchor_{anchor_id}"

        # Set the timestamp to current time
        combined_msg.header.stamp = rospy.Time.now()

        # Publish the combined message
        self.combined_pub.publish(combined_msg)
        #rospy.loginfo("Published combined pose and UWB range message")

    def publish_anchors_gt(self):
        marker_array = MarkerArray()

        for i, wp in enumerate(self.anchors_list):
            if wp[0] is np.nan or wp[1] is np.nan or wp[2] is np.nan:
                continue

            # Create a marker for this waypoint
            marker = Marker()
            marker.header.frame_id = "vicon"  # Adjust according to your frame of reference
            marker.header.stamp = rospy.Time.now()
            marker.ns = "waypoints"
            marker.id = i + 1  # Make sure each marker has a unique ID
            marker.type = Marker.SPHERE
            marker.action = Marker.ADD
            marker.pose.position.x = wp[0]
            marker.pose.position.y = wp[1]
            marker.pose.position.z = wp[2]
            marker.pose.orientation.w = 1.0  # No rotation for a sphere
            marker.scale.x = 0.2  # Scale the sphere (0.2m diameter)
            marker.scale.y = 0.2
            marker.scale.z = 0.2
            marker.color.a = 1.0  # Alpha (opacity)
            marker.color.r = 0.0  
            marker.color.g = 0.0
            marker.color.b = 1.0
            marker_array.markers.append(marker)
        
        self.anchors_marker_pub.publish(marker_array)

    def publish_anchors_estimate(self, anchors_estimate):
        marker_array = MarkerArray()

        for i, wp in enumerate(anchors_estimate):
            if wp[0] is np.nan or wp[1] is np.nan or wp[2] is np.nan:
                continue

            # Create a marker for this waypoint
            marker = Marker()
            marker.header.frame_id = "vicon"  # Adjust according to your frame of reference
            marker.header.stamp = rospy.Time.now()
            marker.ns = "waypoints"
            marker.id = 1  # Make sure each marker has a unique ID
            marker.type = Marker.SPHERE
            marker.action = Marker.ADD
            marker.pose.position.x = wp[0]
            marker.pose.position.y = wp[1]
            marker.pose.position.z = wp[2]
            marker.pose.orientation.w = 1.0  # No rotation for a sphere
            marker.scale.x = 0.2  # Scale the sphere (0.2m diameter)
            marker.scale.y = 0.2
            marker.scale.z = 0.2
            marker.color.a = 1.0  # Alpha (opacity)
            marker.color.r = 1.0  
            marker.color.g = 1.0
            marker.color.b = 0.0
            marker_array.markers.append(marker)
        
        self.anchors_estimate_marker_pub.publish(marker_array)

    def publish_current_anchors_estimate(self, anchors_estimate):
        marker_array = MarkerArray()

        for i, wp in enumerate(anchors_estimate):
            if wp[0] is np.nan or wp[1] is np.nan or wp[2] is np.nan:
                continue

            # Create a marker for this waypoint
            marker = Marker()
            marker.header.frame_id = "vicon"  # Adjust according to your frame of reference
            marker.header.stamp = rospy.Time.now()
            marker.ns = "waypoints"
            marker.id = i + 1  # Make sure each marker has a unique ID
            marker.type = Marker.SPHERE
            marker.action = Marker.ADD
            marker.pose.position.x = wp[0]
            marker.pose.position.y = wp[1]
            marker.pose.position.z = wp[2]
            marker.pose.orientation.w = 1.0  # No rotation for a sphere
            marker.scale.x = 0.2  # Scale the sphere (0.2m diameter)
            marker.scale.y = 0.2
            marker.scale.z = 0.2
            marker.color.a = 0.7  # Alpha (opacity)
            marker.color.r = 1.0  
            marker.color.g = 1.0
            marker.color.b = 1.0
            marker_array.markers.append(marker)
        
        self.final_anchors_estimate_marker_pub.publish(marker_array)

    def publish_waypoints(self, waypoints):
        waypoint_list_msg = MissionWaypointArray()
        waypoint_list = []
        
        # MarkerArray for RViz visualization
        marker_array = MarkerArray()

        # Add a pause hold at the first waypoint to avoid the drone flying off immediately
        pause_waypoint = MissionWaypoint()
        pause_waypoint.x = self.current_position[0]
        pause_waypoint.y = self.current_position[1]
        pause_waypoint.z = self.current_position[2]
        pause_waypoint.yaw = 90.0
        pause_waypoint.holdtime = 2
        waypoint_list.append(pause_waypoint)

        # Marker for the first waypoint (pause point)
        marker = Marker()
        marker.header.frame_id = "vicon"  # Adjust according to your frame of reference
        marker.header.stamp = rospy.Time.now()
        marker.ns = "waypoints"
        marker.id = 0
        marker.type = Marker.SPHERE
        marker.action = Marker.ADD
        marker.pose.position.x = pause_waypoint.x
        marker.pose.position.y = pause_waypoint.y
        marker.pose.position.z = pause_waypoint.z
        marker.pose.orientation.w = 1.0  # No rotation for a sphere
        marker.scale.x = 0.2  # Scale the sphere (0.2m diameter)
        marker.scale.y = 0.2
        marker.scale.z = 0.2
        marker.color.a = 1.0  # Alpha (opacity)
        marker.color.r = 1.0  # Red color
        marker.color.g = 0.0
        marker.color.b = 0.0
        marker_array.markers.append(marker)


        for i, wp in enumerate(waypoints):
            if wp[0] is np.nan or wp[1] is np.nan or wp[2] is np.nan:
                continue
            waypoint_msg = MissionWaypoint()
            waypoint_msg.x = wp[0]
            waypoint_msg.y = wp[1]
            waypoint_msg.z = wp[2]
            waypoint_msg.yaw = 90.0
            waypoint_msg.holdtime = 1

            waypoint_list.append(waypoint_msg)

             # Create a marker for this waypoint
            marker = Marker()
            marker.header.frame_id = "vicon"  # Adjust according to your frame of reference
            marker.header.stamp = rospy.Time.now()
            marker.ns = "waypoints"
            marker.id = i + 1  # Make sure each marker has a unique ID
            marker.type = Marker.SPHERE
            marker.action = Marker.ADD
            marker.pose.position.x = wp[0]
            marker.pose.position.y = wp[1]
            marker.pose.position.z = wp[2]
            marker.pose.orientation.w = 1.0  # No rotation for a sphere
            marker.scale.x = 0.2  # Scale the sphere (0.2m diameter)
            marker.scale.y = 0.2
            marker.scale.z = 0.2
            marker.color.a = 1.0  # Alpha (opacity)
            marker.color.r = 0.0  # Green color for the rest of the waypoints
            marker.color.g = 1.0
            marker.color.b = 0.0
            marker_array.markers.append(marker)



        waypoint_list_msg.waypoints = waypoint_list
        waypoint_list_msg.action = MissionWaypointArray.CLEAR
        waypoint_list_msg.reference = MissionWaypointArray.GLOBAL

        
        self.marker_pub.publish(marker_array)

        self.waypoints_pub.publish(waypoint_list_msg)
        rospy.loginfo(f"Published waypoint: {len(waypoint_list)}")








if __name__ == "__main__":
    rospy.init_node('uwb_anchor_initialization_node', anonymous=True)
    node = UWBAnchorInitialisationNode()

    # Allow ROS to spin and process callbacks
    try:
        rospy.spin()
    except KeyboardInterrupt:
        rospy.loginfo("Shutting down node")
    
    # Ensure the processing thread completes
    node.processing_queue.join()

